# -*- coding: utf-8 -*-
"""
Step 3: Move the content of the ElasticBody in a separated file for reusability
"""
from math import *
import Sofa

angle_tetra = [
72.99260494352605, 63.15747148579301, -162.32884174899723, -117.39760200352409, 107.73818521541331, -27.464548689149588, -62.76754711614042, 152.72886251764646, 17.56980455510228, 162.48023871068634, 27.312462938199285, -107.69197315333322, 117.45450086844028, -72.46657906891494, -152.5696890431506, -17.761438226653457, 97.05155249634278, 84.4847613262374, 173.54305666186013, -83.56659366475533, -51.582813557752935, -173.4277674951896, -90.07249555101181, -38.59419484662537, -134.97669869852234, 135.07069525978218, -6.577918317877607, -141.50717881921958, 141.5959566503361, 6.4259422028243876, 52.18704382387908, 45.302851843312325, 90.61974384948866, 68.45201573390463, -67.59464453334732, -179.94544067684117, -45.10913659437422, 157.58594126384642, -157.4507861020332, -0.0962961493436198, 112.57060487194998, 128.55209083432086, 22.448200968247832, 38.711618685080744, -22.587959788035736, -112.53935404947093, -96.56974694556355, -128.49489100102588, 94.94077000906672, 86.12469891079651, -95.06843615369706, -85.0477403890807, 173.86199810557298, 156.1446095613406, -41.201797583898035, 6.1374414889259645, 23.875899352647888, -138.90783757774307, -50.98496517670622, 129.85241323919354, -3.798697877074527, -176.2180999169321, -129.05455888373245, 139.7062621219323, -68.03183776185392, -112.07761744503524, 50.666142427092126, 40.50923364617552, 117.13463491049573, 102.68063629588825, 109.28904229244147, 134.61559581739317, 122.74470254776656, 118.89267139060202, -162.16278660591888, -17.854018543976302, -140.97174583745579, -146.71804486517095, -136.80011217170292, -141.817522932011, -43.220421072584365, -38.217011209867835, -39.11322188006496, -33.346653930978135, 149.6072229281298, 69.60495382385332, 142.75082904216387, 136.53372615228156, 148.07888983257467, 140.97769912927265, 134.59701688563536, -103.89158172743234, 16.10844865879471, 136.1084516881268, 140.29788697691117, 132.13726373430399, 155.16320451898625, 159.46600549027085, 26.840924793435754, -84.98114895851114, -82.39050156166664, -79.68652600774956, -77.31865175992374, -75.35771281604815, -77.76100940152034, -74.81568156840791, -75.96048327212272, -77.31865175992374, 144.8098004652018, 140.50725414998843, 24.83679548101378, 20.53399450972914, -95.01885104148886, -99.31410951574209, 153.15907520656424, 41.96877956399423, -86.98375319909634, -90.0, -93.01624680090367, 43.89154831187322, 163.8915513412053, 33.18653062942062, 161.96878334189554, -101.96881561256433, 18.03121665810444, 138.03122043600578, 146.81346937057938, 35.19019953479822, 39.49274585001157, -80.00860754588794, -32.61565736219006, -46.82963851575195, -57.2218123054456, -52.80696544576271, -147.44312450966785, -133.24595319598583, -122.88665579783937, -127.25366233349365, -125.28346768096733, 60.49116001096664, 5.79640460531147, -64.2916205401318, -178.24103851507613, 175.15789401899724, 176.51183307906413, 124.28034673463439, 98.72283840747174, 97.41125755219991, 108.2617984124317, -73.39921631355661, -107.30976811967217, 12.675660539761315, 166.5996781748104, 47.32444531484515, 133.39961884802472, -17.96805319845889, -43.64781476413989, 44.39460518734564, -114.19913337692893, 13.400034909747118, -166.43136910743567, 130.1067301883781, -69.56456266027945, -73.23216030841442, -72.42231519906952, 71.49149660693385, 170.43446320499686, 166.76639178867094, 167.57643955217176, -68.5518904362154, -72.14236173807906, -115.73457243564545, 4.262457336343961, 171.449219727241, 170.24134171850073, 174.22868591821492, 165.71632900429543, 161.17550368347122, 160.00724842151268, 164.23011785662962, 157.4789135336982, 151.78829100845286, 160.6996807797505, 164.03834322231765, 164.21798380189028, 167.5644068901269, 132.6748811487897, 54.238651467907836, -104.39465623179598, -1.5931344792917854, 55.705310655732895, -136.4122797154361, -162.03971916754398, 9.95660336976197, -57.43032906537235, 75.77629496908986, 117.87323815503342, 124.70470537224269, 123.13456600127239, 175.6887744516994, 173.16552597545817, 171.77521825797575, 165.66480577542188, 159.37609958298492, 170.67140716588509, 165.41106867989242, 160.13026898259017, -110.42272551506836, -106.75935603271022, -107.56065651887874, 164.39463095665465, 10.950192260642016, 135.60539481265437, 49.15744307629536, 46.599639711404464, -54.77584857854998, -111.45670264801804, -107.85892216630259, 15.605369043345357, -175.79726183838048, -176.28792599736144, -72.68282244641247, 62.90961610743924, 125.76267418267064, 167.31598417631184, -65.82354044486347, 103.27893492766336, -122.6151446782947, -1.820862905079135, 4.953618129839565, 3.4270780654141193, -13.569596249259286, -106.60203394210326, 131.04482251240404, 50.158451617279745, 165.70397551714294, -75.96064050413402, -79.52886243863922, -76.02715411416905, -72.43620849332797, -80.47446401518917, -76.8643763939803, -76.04383871665267, -83.37826264547425, -84.47639272639493, -88.55755446436282, -88.42221335090123, -83.86763543883141, -81.32145186264906, -83.38192584640429, -77.20112658674475, -104.03945981164327, -100.46893854386755, -103.96041543318735, -107.5824483677039, -99.53529855289096, -103.15482326011262, -103.98224605298884, -96.61800839223366, -96.12923651168809, -100.63005894299484, -95.53188781637947, -91.45220998872995, -91.59420087759406, -96.64388438873434, -102.83341635817756, 155.5976962238337, 149.95461561595775, 144.43959328912993, 144.1362521863168, 150.00692776210178, 155.95754400628616, 159.36895866417743, 165.64215439942473, 171.7343087513908, 170.65695288330565, 165.39984455401543, 160.12325402730022, 169.88035153027676, -52.24921844632252, -127.8382883355726, 23.68819367676608, 19.192807228690512, 22.73370985077256, 19.06228083557461, 16.167133445771068, 16.274855667987687, 13.471527938596914, 13.477949401465303, 16.284833602833476, 19.308078417241884, 16.40226682745445, 23.13519951674956, 24.92374153816057, 20.51700667450609, 28.72253352725206, 156.30802328439256, 160.80376061344282, 156.83139303468147, 155.0756946592881, 159.48280599188848, 151.27688019462843, 108.32658520778035, 36.34455632173789, 40.83741635275672, 37.374058329449255, 41.27077908979976, 44.05260176823194, 44.06153469443703, 46.75078067075437, 46.858388927625015, 44.04969703815237, 41.14996885392278, 44.058986411280536, 37.0884081989754, 35.14013303562849, 39.54221757843568, 31.37301279904197, 143.65488139826363, 139.1621657122199, 143.12984771416916, 139.52313407034916, 135.91895273352262, 136.46106705280502, 140.2180689208687, 144.85860796973958, 140.4572482422008, 148.62642299772307, 109.33903970848709, -104.75538813269746, -75.2451673031366, 164.75395915170716, 15.239180446993506, 44.760610883758524, 155.96064832843675, 30.028907043817515, 149.9710929561825, 135.44819964837268, -122.64609056695485, -112.50834677486908, -120.82968606398347, -57.37907119732857, -67.5710251515361, -59.198431913014645, -104.57587835268193, -112.40619885959843, -75.499963740775, -67.64881696717629, -107.83381145472005, 128.45749909862784, 131.816104948111, 11.418610299967549, -72.17491384002969, 48.71882600231437, -87.78564433958924, -87.37280389933007, -81.72649217796275, -73.00774620063858, -92.2307780657861, -92.65888428104017, -98.28292591434789, -106.99313523022622, -94.14444018564137, -98.56087747936452, -91.07141710076188, -91.14442402137153, -94.73626883287932, -99.14938911079405, 158.39110723378974, 164.09661163539005, 169.92268636262614, -93.68734953329488, -89.99811165070314, -93.9838414494685, -90.0009999851126, -86.01485612478443, -86.31036914503973, 20.274452492649402, 20.45545764972597, 14.140917299306071, 14.870550912455103, 9.522332568131919, 8.441454782554121, -84.15094116010852, -90.00750388620148, -95.87475354199138, -95.25265943221046, -90.0064925225731, -84.76364406231131, -98.70159190794408, -99.71970243843776, -107.8854070321902, -105.07627986834227, -111.55778781818057, 24.13660964276114, 23.90669401827866, 31.40178545438645, -85.263199179011, -82.73371720123052, -83.19665765845292, -85.85555981435863, -88.92858289923812, -88.85341139588012, -81.30748254565516, -80.30142878360974, -74.93690102524211, -72.15432435283574, -68.46879837751895, 10.172665994539544, -80.00860754588794, 176.5621219515111, 39.68403202480027, 45.980454672165834, 41.006051749154935, 49.14844345465118, 51.560872566671115, 38.4950155313101, 44.565286055500884, 151.18937966008832, 155.4357624070217, 155.43724530018656, 153.7234406457679, 151.189880017689, 149.5818692517425, 153.86221531329846, 149.96588862625381, 146.10157108206568, 145.7791314278032, 143.96823571542802, 148.247748616988, -90.05074518460705, -78.65686483729169, -101.41697635158134, -99.36464322572039, -80.70250708877663, 151.62839174407193, 37.16708831616109, 36.239040653374225, 10.217930577821944, 15.988880235231163, 9.38100459961429, 21.711704433895687, 29.268571502285024, -77.818996736964, -79.33243885926063, 27.965266659969686, 28.18397643554432, 33.33533991158171, 30.78949423477161, 35.6725057310377, 33.15046358609676, 30.787975251605076, 25.890947957644048, 28.477621579162918, 21.76634561254194, 15.68528637944808, 28.805534161167518, 25.558632964229222, 21.125532879979733, 31.283792150403904, 34.49725701878852, 38.930016526954454, 151.19446583883249, 154.44136703577078, 158.87446712002026, 148.7162078495961, 145.5027429812115, 141.06998347304554, 135.937549066595, 177.91322580553626, 161.7329112513195, -168.51854581009988, 2.0772323756923856, 18.28560183774684, -11.48234655128854, 129.97481936470024, 135.77773929849738, 135.64450057272143, 141.72367414537808, 147.78490248038713, 129.94182980641605, -112.32305487236387, -67.7428480817469, 32.39016230062021, 30.033091573931795, 26.136556562872507, 25.367807619833922, 33.89688275450485, 34.740796470282284, 30.11367176755792, 123.08840955697777, 3.3838163806899293, -20.890252045078203, -159.1318092737815, 53.699623562693, -101.02773997179423, -109.03780538351938, -79.00573846935634, -70.96993025502258, 126.86775545039883, -112.49625148301593, -67.54699568724585, -79.33125367227558, -112.34316420061384, -67.77416624880831, -102.56685585268711, 162.73465878789253, 17.266352606552147, 137.23732743643006, 135.23873982256038, 133.84489789666682, 42.76220204418243, 45.61650235967092, 30.420595366881418, 63.15729802400659, 131.92009896358567, 131.61378538827105, -0.5936786693636609, -10.363948541884085, 0.23163922443723511, 9.91940244030866, 18.725522776766155, 14.586581093555921, 14.570889859564438, 18.206993621206806, 9.875001560775393, 25.614610500482577, 5.565131341698128, 22.677754583884873, 5.538948846312814, 29.401383075313404, 31.726483411616144, 22.68815057947522, -169.6280066659201, 179.74145431319434, 169.86528886298206, -90.02395653121324, 46.34836866045721, 174.68628271316206, 41.02020890998291, 49.67344780237179, 56.486196493451914, 35.2100449843415, 90.30007323379779, 76.07372851413606, 126.8458066274948, 31.875001037737626, 38.860593349696195, 52.67542630612008, 13.880588085388554, 112.34013880608491, 144.6498933030154, 152.23332471510713, 149.91424085248437, 118.41306270861169, 165.89026267527976, -101.76493873536535, 156.1728907243371, 163.90010826676942, 159.28182330534466, 168.02870327661302, 163.4326896645068, 159.29241744545587, 153.10321771859847, 150.45617380465433, 174.72350537593562, -65.00532404947218, -115.04824891012309, 60.185050443223645, 138.04984180009615, 41.95015819990384, 18.076700728449087, 161.92329927155092, 143.90112532865385, 128.3011698401616, 121.4195940242502, 38.06426388002568, 53.572700286932545, 65.57706300392901
]

# print(angle_spiral)
offset = -130
angle_spiral = [i-offset for i in angle_tetra] #[i-150+90 for i in angle_tetra] # +50
directions_spiral = []
for angle in angle_spiral:
    # print(angle,math.cos(radians(angle)),math.sin(angle))
    directions_spiral.append([cos(radians(angle)),0.0,sin(radians(angle))])
# print(directions_spiral)
nbr_tretra = 579
transverse_anisotropy_coef = [[4,1.0,0,0]]*nbr_tretra
anisotropyDirections = [[0,1,0]]*nbr_tretra
# TRANSVERSE ONLY

# #FOR 15% AND SIGMA 0.1
# youngModulusTransverse = 1390
# poissonRatioTransverse = 0.26162 #(yz)
# youngModulusLongitudinal = 94.22
# poissonRatioTransverseLongitudinal = 0.4161  #(zx)
# shearModulusLongitudinal = 16.28215
# poissonRatioLongitudinalTransverse = 0.02975 #(xy)
# ################################################

# #FOR 15% AND SIGMA 0.1
# youngModulusTransverse = 1390
# poissonRatioTransverse = 0.26162 #(yz)
# youngModulusLongitudinal = 1390
# poissonRatioTransverseLongitudinal = 0.26162  #(zx)
# shearModulusLongitudinal = 550.879
# poissonRatioLongitudinalTransverse = 0.26162 #(xy)
# ################################################

# youngModulusValues = [94+i*216 for i in range(7)]
# poissonRatioValues = [0.4161-i*0.02575 for i in range(7)]
# value = 6
# # print(youngModulusValues,poissonRatioValues)
# print(youngModulusValues[value],poissonRatioValues[value])

# #FOR TEST ANISOTROPY
# youngModulusTransverse = 1390
# poissonRatioTransverse = 0.2616 #(yz)
# youngModulusLongitudinal = 94 #youngModulusValues[value]
# poissonRatioTransverseLongitudinal = poissonRatioValues[value]  #(zx)
# shearModulusLongitudinal = youngModulusLongitudinal/(2*(1-poissonRatioTransverseLongitudinal))
# poissonRatioLongitudinalTransverse = 0.02975 #(xy)
# ################################################
youngModulusTransverse = 250
poissonRatioTransverse = 0.45 #(yz)
youngModulusLongitudinal = 250 #youngModulusValues[value]
poissonRatioTransverseLongitudinal = 0.45  #(zx)
shearModulusLongitudinal = youngModulusLongitudinal/(2*(1-poissonRatioTransverseLongitudinal))
poissonRatioLongitudinalTransverse = 0.45 #(xy)

youngModulus= [youngModulusTransverse]*nbr_tretra
poissonRatio= [poissonRatioTransverse]*nbr_tretra

for i in range(nbr_tretra):
    anisotropyDirections[i] = directions_spiral[i]
    transverse_anisotropy_coef[i] = [2,youngModulusLongitudinal,poissonRatioTransverseLongitudinal, shearModulusLongitudinal]
    # transverse_anisotropy_coef[i] = [4,1,poissonRatioTransverseLongitudinal, shearModulusLongitudinal]



def ElasticBody(name="ElasticBody", rotation=[0, 0, 0], translation=[0, 0, 0], color=[1.0, 1.0, 1.0, 1.0]):
    # To simulate an elastic object, we need:
    # - a deformation law (here linear elasticity)
    # - a solving method (here FEM)
    # - as we are using FEM we need a space discretization (here tetrahedron)
    self = Sofa.Core.Node(name)
    mechanicalmodel = self.addChild("MechanicalModel")
    mechanicalmodel.addObject('GIDMeshLoader',
                              name='loader',
                              rotation=rotation,
                              translation=translation,
                              filename='data/mesh/tripod_low.gidmsh')
    mechanicalmodel.addObject('MeshTopology',
                              src='@loader',
                              name='container')

    mechanicalmodel.addObject('MechanicalObject',
                              name='dofs',
                              position=mechanicalmodel.loader.position.getLinkPath(),
                              showObject=False,
                              showObjectScale=5.0)
    mechanicalmodel.addObject('UniformMass',
                              name="mass",
                              totalMass=0.032)

    # ForceField components

    # mechanicalmodel.addObject('TetrahedronFEMForceField',
    #                           name="linearElasticBehavior",
    #                           youngModulus=250,
    #                           poissonRatio=0.45)

    high_fem = mechanicalmodel.addObject('TetrahedronAnisotropicForceField',
                              name="Elasticity",  printLog=1,  poissonRatio=poissonRatio,  youngModulus=youngModulus,
                              # integrationMethod='analytical',
                              # method='qr',
                              # forceAffineAssemblyForAffineElements=False,
                              # oneRotationPerIntegrationPoint=False,
                              # numericalIntegrationMethod='Tetrahedron Gauss',
                              # integrationOrder=1,
                              # transparency= 0.75,
                              drawHeterogeneousTetra=False)
    high_fem.elasticitySymmetry   = 'transverseIsotropic'
    high_fem.anisotropyParameters = transverse_anisotropy_coef
    high_fem.anisotropyDirections = anisotropyDirections

    # Visual model
    # visualmodel = Sofa.Core.Node("VisualModel")
    # # Specific loader for the visual model
    # visualmodel.addObject('MeshSTLLoader',
    #                       name='loader',
    #                       filename='data/mesh/tripod_mid.stl',
    #                       rotation=rotation,
    #                       translation=translation)
    # visualmodel.addObject('OglModel',
    #                       src=visualmodel.loader.getLinkPath(),
    #                       name='renderer',
    #                       color=color)
    # self.addChild(visualmodel)
    #
    # visualmodel.addObject('BarycentricMapping',
    #                       input=mechanicalmodel.dofs.getLinkPath(),
    #                       output=visualmodel.renderer.getLinkPath())
    return self


def createScene(rootNode):
    from stlib3.scene import Scene

    pluginsList = [
        'Sofa.Component.IO.Mesh',  # Needed to use components [GIDMeshLoader,MeshSTLLoader]
        'Sofa.Component.LinearSolver.Direct',  # Needed to use components [SparseLDLSolver]
        'Sofa.Component.Mapping.Linear',  # Needed to use components [BarycentricMapping]
        'Sofa.Component.Mass',  # Needed to use components [UniformMass]
        'Sofa.Component.SolidMechanics.FEM.Elastic',  # Needed to use components [TetrahedronFEMForceField]
        'Sofa.Component.StateContainer',  # Needed to use components [MechanicalObject]
        'Sofa.Component.Topology.Container.Constant',  # Needed to use components [MeshTopology]
        'Sofa.Component.Visual',  # Needed to use components [VisualStyle]
        'Sofa.GL.Component.Rendering3D',  # Needed to use components [OglModel,OglSceneFrame]
        'Sofa.GUI.Component',  # Needed to use components [AttachBodyButtonSetting]
    ]

    scene = Scene(rootNode, gravity=[0.0, -9810, 0.0], plugins=pluginsList,
                  iterative=False)
    scene.addMainHeader()
    scene.addObject('DefaultAnimationLoop')
    scene.addObject('DefaultVisualManagerLoop')
    scene.Simulation.addChild(ElasticBody())
